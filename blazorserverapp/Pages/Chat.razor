@using grincoAppModels
@using blazorserverapp.Service
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.SignalR.Client
@inject IMemoryCache _memoryCache
@inject RequestService<Conversation> _conversationRequestService
@inject RequestService<Message> _messageRequestService
@inject NavigationManager _navigationManager
@inject ReloadService _reloadService
@inject IJSRuntime JSRuntime
<div Class="rz-p-0 rz-p-md-12">
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeSM="6">
            <RadzenStack>
                <RadzenFormField Text="Conversations" Variant="@variant">
                    <RadzenDropDown Data=@Conversations @bind-Value="@selectedConversation" TextProperty="Description" Change="OnChange" />
                </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</div>

<div class="conversation-container-1">
    <div class="conversation-container-2">
        @foreach (var message in Messages)
    {
    string positionCssClassName = "";
    string? authorLogin = selectedConversation!.Participants.FirstOrDefault(p=>p.Id == message.SenderId)?.Login;
    if(authorLogin == CurrentUser.Login)
        positionCssClassName = "right";
    <div class="message-item-container @positionCssClassName" >
      <div >
      @authorLogin:
      </div>
      <div class="message-content-container">
        @message.Content
      </div>
    </div>  
   
    }
    <input type="text" @bind="newMessage" @onkeydown="CheckForEnter" />
    <button @onclick="AddMessage" >Send</button>

    
    </div>
    
  </div>

<style>
.conversation-container-1{
  margin: auto;
  display:flex;
  flex-direction: column;
  justify-content: center;
  width: 510px;
  height: 700px;
  border: 3px solid #000000;
  border-radius: 50px;
}
.conversation-container-2{
  display : flex;
  flex-wrap: nowrap;
  flex-direction: column;
  justify-content: right;
  background-color: white;
  width: 500px;
  height: 600px;
  overflow-y: auto;
  scroll-padding-top: 500px;
  scrolltop: 600px;
}
.message-item-container{
    display: flex;
    flex-direction: row;
  margin: 20px;
  max-width: 60%;
}
.message-content-container{
  margin: auto;
  justify-content: right;
  border: 1px solid #000000;
  border-radius: 50px;
  background-color: white;  
  padding:10px;
  max-width: inherit;
  
  
}
.right{
  align-self: flex-end;
}
</style>
@code {
    List<Conversation> Conversations { get; set; } = new List<Conversation>();
    Conversation? selectedConversation;
    User CurrentUser {get;set;} = new User();
    Variant variant = Variant.Filled;
    List<Message> Messages = new List<Message>();
    string newMessage = "";
    HubConnection? hubConnection;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        CurrentUser  = _memoryCache.Get<User>("currentUser");
        var parameters = new Dictionary<string,string>();
        parameters.Add("withParticipants","true");
        Conversations = await _conversationRequestService.GetMany(@$"/Conversations/by_participant/{CurrentUser.Id}",parameters);
        selectedConversation = Conversations.Any() ? Conversations.FirstOrDefault() : null;
        if(selectedConversation !=null)
        {
            await OpenConversation();
        }
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://grincoapp.bzh/chathub"/*_navigationManager.ToAbsoluteUri("/chathub")*/)
            .Build();

        hubConnection.On<Message>("ReceiveMessage",message =>
        {
            Messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }
    
    async Task OpenConversation()
    {
        Messages.Clear();
        Messages = await _messageRequestService.GetMany(@$"/Messages/conversations/{selectedConversation!.Id}", new Dictionary<string,string>());

    }
    async Task OnChange()
    {
        if(selectedConversation != null)
        {
            await OpenConversation();
            StateHasChanged();
        }
    }
    async Task CheckForEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddMessage();
        }
    }
    async Task AddMessage()
    {
            
            
            {
                var message = new Message()
                {
                    Content = newMessage,
                    ConversationId = selectedConversation!.Id,
                    SenderId = CurrentUser.Id,
                    TimeStamp = DateTime.Now
                };
                if (hubConnection is not null)
                {
                    await hubConnection.SendAsync("SendMessage", message);
                }
                await _messageRequestService.Save<Message>(@$"/Messages/",message);
                newMessage = string.Empty;
                
                
                
            }
        
        StateHasChanged();
        
    }
    void OnReceiveMessage(Message message)
    {
        Messages.Add(message);
        StateHasChanged();
    }
}
